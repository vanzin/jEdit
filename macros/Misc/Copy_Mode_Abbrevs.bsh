/*
 * Copy _Mode_Abbrevs.bsh - a BeanShell macro script for the
 * jEdit text editor - Copies abbreviations from one
 * editing mode to another
 * Copyright (C) 2001 John Gellene
 * jgellene@nyc.rr.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * $Id$
 */

import javax.swing.border.EmptyBorder;

boolean doCopy(String target, String source)
{
    errorTitle = "Error copying abbreviations";
    if(source == null || source.length() == 0
        || target == null || target.length() == 0)
    {
        JOptionPane.showMessageDialog(view,
            "Both target and source modes must be specified.",
            errorTitle, JOptionPane.ERROR_MESSAGE);
        return false;
    }
    abbrevs = Abbrevs.getModeAbbrevs();
    sourceTable = abbrevs.get(source);
    if(sourceTable == null)
    {
        JOptionPane.showMessageDialog(view,
            "No abbreviation table for " + source + " mode.",
            errorTitle, JOptionPane.ERROR_MESSAGE);
        return false;
    }
    if(sourceTable.isEmpty())
    {
        JOptionPane.showMessageDialog(view,
            "The table for " + source + " mode is empty.",
            errorTitle, JOptionPane.ERROR_MESSAGE);
        return false;
    }
    sourceAbbrevs = sourceTable.keys();
    while(sourceAbbrevs.hasMoreElements())
    {
        abbrev = sourceAbbrevs.nextElement();
        expansion = sourceTable.get(abbrev);
        if(expansion != null)
		{
			if(target.equals("global"))
				Abbrevs.addGlobalAbbrev(abbrev, expansion);
			else
				Abbrevs.addModeAbbrev(target, abbrev, expansion);
		}
    }
    return true;
}

Object[] getActiveSets( boolean useGlobal)
{
    Mode[] modes = jEdit.getModes();
    length = modes.length;
    if(useGlobal)
        ++length;
    modeNames = new Object[length];
    if(useGlobal)
        modeNames[0] = "global";
    for(i = (useGlobal ? 1 : 0), j = 0; i < length; ++i, ++j)
    {
        modeNames[i] =  modes[j].getName();
    }
    return modeNames;
}


void copyModeAbbrevs()
{
    dialogTitle = "Copy abbreviations between editing modes";
    dialog = new JDialog(view, dialogTitle, true);
    content = new JPanel(new GridLayout(2, 1, 20, 0));
    content.setBorder(new EmptyBorder(10, 5, 5, 5));
    content.setPreferredSize(new Dimension(320, 160));
    dialog.setContentPane(content);

    modesPanel = new JPanel(new FlowLayout());

    sourcePanel = new JPanel(new GridLayout(2, 1, 0, 5));
    sourceLabel = new JLabel("Copy from:", SwingConstants.CENTER);
    sourceLabel.setForeground(Color.black);
    sourceCombo = new JComboBox(getActiveSets(false));
	sourceCombo.setMaximumRowCount(4);
    sourcePanel.add(sourceLabel);
    sourcePanel.add(sourceCombo);

    targetPanel = new JPanel(new GridLayout(2, 1, 0, 5));
    targetLabel = new JLabel("Copy to:", SwingConstants.CENTER);
    targetLabel.setForeground(Color.black);
    targetCombo = new JComboBox(getActiveSets(true));
	targetCombo.setMaximumRowCount(4);
    targetPanel.add(targetLabel);
    targetPanel.add(targetCombo);

    resource = "/org/gjt/sp/jedit/icons/FastForward24.gif";
    image = new ImageIcon(GUIUtilities.class.getResource(resource));

    modesPanel.add(sourcePanel);
    modesPanel.add(new JLabel(image));
    modesPanel.add(new JLabel(image));
    modesPanel.add(targetPanel);

    content.add(modesPanel);

    buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 0));
    buttonPanel.setBorder(new EmptyBorder(40, 50, 0, 50));
    ok = new JButton("OK");
    cancel = new JButton("Cancel");
    ok.setPreferredSize(cancel.getPreferredSize());
    dialog.getRootPane().setDefaultButton(ok);
    buttonPanel.add(ok);
    buttonPanel.add(cancel);
    content.add(buttonPanel);

    // register this method as an ActionListener for
    // the buttons
    ok.addActionListener(this);
    cancel.addActionListener(this);


    void actionPerformed(e)
    {
        if(e.getSource() != cancel)
        {
            sourceMode = sourceCombo.getSelectedItem().toString();
            targetMode = targetCombo.getSelectedItem().toString();
            message = "Do you really want to copy all abbreviations in\nthe "
                + sourceMode + " editing mode to the " + targetMode
				+ " mode?\n(Any copying must be undone manually)";
            if( JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(
                    dialog, message, dialogTitle,
					JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE))
            {
                if(doCopy(targetMode, sourceMode))
                {
                    message = "Abbreviations in " + sourceMode +
                        " editing mode copied to " + targetMode + " mode.";
                    JOptionPane.showMessageDialog(dialog, message, dialogTitle,
                        JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
        dialog.dispose();
    }

    dialog.pack();
    dialog.setLocationRelativeTo(view);
    dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    dialog.setVisible(true);
}

copyModeAbbrevs();

// end of Copy_mode_abbrevs.bsh

