/*
 * Run_Macro_at_Caret.bsh - a BeanShell macro script
 * for the jEdit text editor - runs the macro named
 * by the word under or immediately to the left of the
 * editing caret
 * Copyright (C) 2001 John Gellene
 * jgellene@nyc.rr.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the jEdit program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * $Id$
 *
 * Notes on usage:
 *
 * The macro script path name must be of the form
 * \w+(\/\w+)*\.bsh (no whitespace) relative to either
 * of the default macro directories.  For this purpose, use
 * '/' as the separator character regardless of your
 * operating system.
 *
 * The word under or next to the caret must be of the form
 * \w+(\/\w+)* (no whitespace, no '.bsh' extension).
 *
 * To use this macro in connection with abbreviations,
 * define a abbreviation for the desired macro name
 * without the .bsh extension (for example,
 * 'foo' => 'Text_macros/reallyCoolMacro').  If you bind
 * this macro to a shortcut key (such as C-SPACE), you can
 * execute another macro from the keyboard by typing the
 * abbreviated name, pressing SPACE to trigger abbreviation
 * substitution, then C-SPACE to run this macro and invoke
 * the unabbreviated macro.
 *
 */


// methods

/*
 * getMacroName()
 *
 * This gets a name from selectMacroWord() and checks whether
 * it is a 'word' composed of alphanumeric characters or a
 * non-word.  If the caret is at the immediately to the left
 * of a 'word', selectMacroWord() will select the immediately
 * succeeding 'non-word'.  If this occurs after the selection,
 * the method moves the caret one position to the left, recalls
 * selectMacroWord(), and retests the resulting selection.
 *
 * If successful, the method returns the selected macro name text.
 * A search failure results in a return value of null.
 */
String getMacroName()
{
	selectMacroWord();
	name = textArea.getSelectedText();
	if(name == null && pos != buffer.getLength())
		return null;
	if(	name == null || name.length() == 0 ||
		(!Character.isLetterOrDigit(name.charAt(0)) &&
			noWordSep.indexOf(name.charAt(0)) == -1))
	{
		if(pos > 0)
		{
			textArea.setCaretPosition(pos);
			textArea.goToPrevCharacter(false);
			selectMacroWord();
			name = textArea.getSelectedText();
			if(name == null || name.length() == 0 ||
				(!Character.isLetterOrDigit(name.charAt(0)) &&
					noWordSep.indexOf(name.charAt(0)) == -1))
				return null;
		}
		else return null;
	}
	return name;
}


/*
 * getMacroPath()
 *
 * This method looks for the named macro in the two 'default'
 * directories used by jEdit and returns the path name, or null
 * if a macro file cannot be found.
 *
 */
String getMacroPath(String name)
{
	path = MiscUtilities.constructPath(jEdit.getJEditHome(), "macros")
		+ File.separator + name + ".bsh";
	File file = new File(path);
	if(!file.exists())
	{
		settings = jEdit.getSettingsDirectory();
		if(settings != null)
		{
			path = MiscUtilities.constructPath(settings, "macros")
				+ File.separator + name + ".bsh";
			file = new File(path);
			if(file.exists())
				return path;
		}
		return null;
	}
	else return path;
}


/*
 * selectMacroWord()
 *
 * This selects a sequence of characters in the text area
 * using the TextUtilities.findWordStart()/findWordEnd() methods
 * employed by jEdit.  It adopts the rule that '/' and '_' should be
 * treated as alphanumeric so that whole path names can be found.
 *
 * TextUtilities.findWordStart/findWordEnd yields either a sequence
 * of alphanumeric characters or a sequence of non-alphanumeric
 * characters.  The resulting selected text must therefore
 * be tested by the calling method.
 */
void selectMacroWord()
{
	line = textArea.getCaretLine();
	lineStart = textArea.getLineStartOffset(line);
	offset = textArea.getCaretPosition() - lineStart;
	if(textArea.getLineLength(line) == 0)
		return null;
	String lineText = textArea.getLineText(line);
	if(offset == textArea.getLineLength(line))
		offset--;
	int wordStart = TextUtilities.findWordStart(lineText, offset, noWordSep);
	int wordEnd = TextUtilities.findWordEnd(lineText, offset + 1, noWordSep);
	textArea.select(lineStart + wordStart, lineStart + wordEnd);
}


/*
 * doIt()
 *
 * This is the main routine of the macro.  If a macro
 * file is found, it is executed in BeanShell.
 */
boolean doIt()
{
	name = getMacroName();
	if(name == null)
	{
		Macros.error(view, "The caret was not located at a word.");
		return false;
	}
	else
	{
		path = getMacroPath(name);
		if(path == null)
		{
			Macros.error(view, "The macro file \"" + name +
				".bsh\" could not be found.");
			return false;
		}
		else if(name.toLowerCase().indexOf("run_macro_at_caret") != -1)
		{
			Macros.error(view,
				"Macro \"run_macro_at_caret\" cannot run itself.");
			return false;
		}
		else
		{
			// get rid of the macro name;
			// the macro being called may not do so
			textArea.setSelectedText("");
			// for jEdit 3.0 substitute the following:
			// BeanShell.runScript(view, path, false);
			BeanShell.runScript(view, path, true, false);
		}
	}
	return true;
}


// global variables, call to main routine, cleanup
noWordSep = "_/";
pos = textArea.getCaretPosition();
if( !doIt())
	textArea.setCaretPosition(pos);

