/*
 * Write_File_Header.bsh - A BeanShell macro script
 * for the jEdit text editor -- inserts a formatted file header
 * baed upon user input
 * Copyright (C) 2001 John Gellene
 * email jgellene@nyc.rr.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the jEdit program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * $Id$
 *
 * Notes on use:
 *
 * This macro has one variable specifically intended for customization:
 * AUTHOR_NAME, in which any name or return value of a method call
 * may be used.  This value will be displayed as the default value in
 * the input dialog.
 *
 * Alternate versions of a file header can be generated by providing a
 * substitute method for makeHeaderText()
 *
 */


import java.text.DateFormat;

void writeFileHeader()
{
	/*
	 * This method packages the results of getHeaderText()
	 * for processing by the main routine, writeFileHeader()
     */
	results(boolean m, boolean s, String p, String t)
	{
		doMark = new Boolean(m);
		doSave = new Boolean(s);
		path = p;
		text = t;
		return this;
	}

	/*
	 * This method generates the actual header text
	 */
	String makeHeaderText(String name, String path, String author, String desc)
	{
		tag = buffer.getMode().getProperty("lineComment");
		if(tag == null)
			tag = "//";
		tagNL = tag.concat("\n");
		border = tag.concat(
			" * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n");

		StringBuffer buf = new StringBuffer(border);
		/*
		 * calls to append() that will be written to
		 * the same line of the buffer are indented
		 */
		buf
			.append(tagNL)
			.append(tag).append("  File Name:  ")
			.append(name).append("\n")
			.append(tagNL)
			.append(tag).append("  Author:     ")
			.append(author).append("\n")
			.append(tagNL);

		Date d = new Date();
		buf
			.append(tag).append("  Date:       ")
			.append(DateFormat.getDateInstance().format(d))
			.append(", ")
			.append(DateFormat.getTimeInstance(DateFormat.SHORT).format(d))
			.append("\n");
		buf
			.append(tagNL)
			.append(tag).append("  Full path:  ").append(path).append("\n")
			.append(tagNL)
			.append(tag).append("  Description:  ").append(desc);
		buf.append("\n");

		buf
			.append(tagNL)
			.append(tagNL)
			.append(border)
			.append("\n");

		return buf.toString();
	}


	/*
	 * This method obtains user input and passes it to the
	 * text generation engine in makeHeaderText()
	 */
	getHeaderText()
	{
		title = "Write file header";
		warning = "Do you want to write a header for "
			+ buffer.getName() + " before naming it?";

		if(buffer.isNewFile() && JOptionPane.YES_OPTION !=
				JOptionPane.showConfirmDialog(view, warning,
				title, JOptionPane.YES_NO_OPTION))
			return null;

		currentPath = buffer.getPath();
		currentName = buffer.getName();

		nameField = new JTextField(currentName);
		authorField = new JTextField(AUTHOR_NAME);
		descField = new JTextField("", 25);
		namePanel = new JPanel(new GridLayout(1, 2));
		nameLabel = new JLabel("Name of file:", SwingConstants.LEFT);
		nameLabel.setForeground(Color.black);
		saveField = new JCheckBox("Save file when done", !buffer.isNewFile());
		namePanel.add(nameLabel);
		namePanel.add(saveField);


		message = new Object[9];
		message[0] = namePanel;
		message[1] = nameField;
		message[2] = Box.createVerticalStrut(10);
		message[3] = "Author's name:";
		message[4] = authorField;
		message[5] = Box.createVerticalStrut(10);
		message[6] = "Enter description:";
		message[7] = descField;
		message[8] = Box.createVerticalStrut(5);

		if( JOptionPane.OK_OPTION != JOptionPane.showConfirmDialog(view, message,
				title, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE))
			return null;

		currentPath = currentPath.substring(0,
		currentPath.length() - currentName.length())
			+ nameField.getText();

		currentName = nameField.getText();

		headerText = makeHeaderText(currentName, currentPath,
		authorField.getText(), descField.getText());


		retVal = results(descField.getText().length() == 0,
		saveField.isSelected(),
		currentPath,
		headerText);
		return retVal;
	}

	/*
	 * This is the main routine
     */
    startPos = textArea.getCaretPosition();
    result = getHeaderText();
    if( result == null) return;

    textArea.setCaretPosition(0);

    textArea.setSelectedText(result.text);
    textArea.setCaretPosition( textArea.getCaretPosition() + startPos);

    /*
     * getLineEndOffset() puts you on the newline character and
     * causes the caret to appear at the beginning of the
     * next line, so we back up one position
     */
    if(result.doMark.booleanValue())
    {
        /*
        * this uses the line number of the "Description" field
        * as shown in the gutter (one more than the line index
        * used by jEditTextArea) to illustrate the technique
        */
        final int descFieldLine = 11;

        marker = textArea.getLineEndOffset(descFieldLine - 1) - 1;
        buffer.addMarker('\0', marker);
    }

    if(result.doSave.booleanValue())
        buffer.save(view, result.path);
}

AUTHOR_NAME = jEdit.getProperty("user.name");
writeFileHeader();

// end of Write_File_Header.bsh

