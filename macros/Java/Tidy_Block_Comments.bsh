/*
 * Tidy_Block_Comments.bsh - BeanShell macro script for the
 * jEdit text editor program - places block comments at uniform
 * location on each line of the current buffer
 * Copyright (C) 2001 John Gellene
 * email: jgellene@nyc.rr.com
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the jEdit program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * $Id$
 *
 * Notes on use:
 *
 * This macro uses jEdit's syntax parsing routines to identify block comments
 * and place them in a column specified by the user.  If uncommented text
 * extends beyond the specified column, the block comment will be placed two
 * columns after the end of the uncommented text with an intervening whitespace.
 *
 * There are some limitations based upon the parsing routines and some slippery
 * feature of certain programming languages.  For example, jEdit treats the '#'
 * character in Perl as a comment marker even when it appears in a format picture
 * line.  If you find this annoying, set the global parameter NEEDS_WHITESPACE
 * to 'true'. This should take care of most of the anomalies.
 *
 * There are three other default global parameters.  IGNORE_FIRST_COLUMN, if set
 * to 'true', will not reformat block comment that start at the beginning of
 * the line. The DEFAULT_COLUMN will be displayed in the text field, and USE_TABS
 * determines whether the "Use tabs" checkbox is initially selected.  Each of
 * these parameters can be changed in the input dialog.
 *
 */

import javax.swing.border.EmptyBorder;

void tidyBlockComments(int atColumn, boolean useTabs,
    boolean ignoreFirstColumn)
{
    title = "Tidy block comments";
    if(blockComment == null)
    {
        JOptionPane.showMessageDialog(view,
            "Block comments are not supported for " +
            buffer.getMode().getName() + " mode.\n"
            + "Check the editing mode of this buffer.",
            title, JOptionPane.ERROR_MESSAGE);
        return;
    }
    dialog = new JDialog(view, title, true);
    content = new JPanel(new GridLayout(3, 1, 20, 0));
    content.setBorder(new EmptyBorder(10, 5, 5, 5));
    content.setPreferredSize(new Dimension(320, 140));
    dialog.setContentPane(content);

    columnPanel = new JPanel(new FlowLayout());
    columnLabel = new JLabel("Select column to display block comments:");
    columnLabel.setForeground(Color.black);
    columnFieldText = String.valueOf(atColumn);
    columnField = new JTextField(columnFieldText, 5);
    columnField.select(0, columnFieldText.length());
    columnPanel.add(columnLabel);
    columnPanel.add(columnField);

    content.add(columnPanel);

    checkBoxPanel = new JPanel(new FlowLayout());
    tabCheckBox = new JCheckBox("Use tabs", useTabs);
    firstColumnCheckBox =
        new JCheckBox("Ignore first column comments", ignoreFirstColumn);
    checkBoxPanel.add(tabCheckBox);
    checkBoxPanel.add(firstColumnCheckBox);

    content.add(checkBoxPanel);

    buttonPanel = new JPanel(new FlowLayout());
    buttonPanel.setBorder(new EmptyBorder(5, 20, 0, 20));
    ok = new JButton("OK");
    cancel = new JButton("Cancel");
    ok.setPreferredSize(cancel.getPreferredSize());
    dialog.getRootPane().setDefaultButton(ok);
    buttonPanel.add(ok);
    buttonPanel.add(cancel);

    content.add(buttonPanel);

    /*
     * BeanShell treats methods as objects.  Under JDK1.2 (or JDK1.1 + Swing),
     * the core AWT and Swing interfaces are available.  This means that a
     * BeanShell method can serve as an action listener.  Under JDK1.3,
     * a BeanShell method can implement arbitrary Java interfaces and thus
     * can serve as any kind of event listener.  Here we will register
     * makeBlockCommentsPretty() (referred to by 'this') as an ActionListener
     * for the buttons and textfield, and a KeyListener for the dialog
     * so we can close it when the user pushes ENTER.
     */
    ok.addActionListener(this);
    cancel.addActionListener(this);
    columnField.addActionListener(this);
    dialog.addKeyListener(this);

    dialog.pack();
    dialog.setLocationRelativeTo(view);

    // Here is the ActionListener implementation.
    void actionPerformed(e)
    {
        if(e.getSource() != cancel)
        {
            try
            {
                useTabs = tabCheckBox.isSelected();
                ignoreFirstColumn = firstColumnCheckBox.isSelected();
                atColumn = Integer.parseInt(columnField.getText());
                if(atColumn < 1) throw new IllegalArgumentException();
                processText(atColumn, useTabs, ignoreFirstColumn);
            }
            catch(IllegalArgumentException e)
            {
                JOptionPane.showMessageDialog(view,
                    "Column must be integer greater than zero.", title,
                    JOptionPane.ERROR_MESSAGE);
            }
        }
        dialog.dispose();
    }

    // Here is the KeyListener implementation.
    void keyPressed(e)
    {
        if(KeyEvent.VK_ESCAPE == e.getKeyChar())
        {
            e.consume();
            dialog.dispose();
        }
    }
    void keyReleased(e) {}



    void processText(int targetColumn, boolean useTabs,
                     boolean ignoreFirstColumn)
    {
        for(int line = 0; line < textArea.getLineCount(); ++line)
        {
            // first fast pass: does the line contain a block comment indicator?
            text = textArea.getLineText(line);
            if(text.indexOf(blockComment) == -1)
                continue;
            // second pass:  parse the line using jEdit's
            // syntax parsing routines to find an active comment
            Buffer.LineInfo info = buffer.markTokens(line);
            Token tok = info.getFirstToken();
            position = 0;
            while( !tok.equals(info.getLastToken()))
            {
                if(tok.id == Token.COMMENT1)
                {
                    // third (partial) pass: is there a block comment?
                    blockCommentPos =
                        findBlockComment(text, tok, position, ignoreFirstColumn);
                    if(blockCommentPos != -1)
                    {
                        newText = processLine(text, blockCommentPos,
                            targetColumn, useTabs);
                        textArea.select(textArea.getLineStartOffset(line),
                            textArea.getLineEndOffset(line) - 1);
                            textArea.setSelectedText(newText);
                        break;
                    }
                }
                position += tok.length;
                tok = tok.next;
            }
        }
    }

    /*
     * The syntax parsing routines treat a block comment as part of the same
     * Token object as a delimited comment if there are no intervening
     * characters between the two.  Because of the posssibility of a "back to
     * back comment", we cannot simply check to see if the comment Token starts
     * with a block comment. This method returns the beginning position of the
     * block comment or -1 if the comment Token does not contain a block
     * comment, or if user options call for ignoring the comment.
     */
    int findBlockComment(String text, Token tok, int position,
                         boolean ignoreFirstColumn)
    {
        if(NEEDS_WHITESPACE && position > 0
            && ' ' != text.charAt(position - 1))
        {
            return -1;
        }
        if(text.startsWith(blockComment, position))
            return (ignoreFirstColumn && position == 0) ? -1 : position;
        backToBackComment = endComment + blockComment;
        backToBackCommentPos = text.indexOf(backToBackComment, position);
        if(backToBackCommentPos != -1 && backToBackCommentPos < position + tok.length)
            return backToBackCommentPos + endComment.length();
        else return -1;
    }

    /*
     * Some adding or substacting of whitespace here
     */
    String processLine(String text, int commentPos, int targetColumn,
        boolean useTabs)
    {
        commentText = text.substring(commentPos);
        StringBuffer sb = new StringBuffer();
        sourceLength = 0;
        if(commentPos != 0)
        {
            sourceText = text.substring(0, commentPos);
            expandedText = TextUtilities.tabsToSpaces(
                sourceText, buffer.getTabSize());
            sourceLength += expandedText.length();

            while(sourceLength > targetColumn - 1 &&
                ' ' == expandedText.charAt(sourceLength - 1))
            {
                --sourceLength;
            }
            sb.append(expandedText.substring( 0, sourceLength));
            // At least one space between source text and block comment
            if(sb.charAt(sourceLength - 1) != ' ')
            {
                sb.append(' ');
                ++sourceLength;
            }
        }
        while(sourceLength < targetColumn - 1)
        {
            sb.append(' ');
            ++sourceLength;
        }
        sb.append(commentText);

        resultString = sb.toString();
        if(useTabs)
            resultString = TextUtilities.spacesToTabs(resultString,
                buffer.getTabSize());

        return resultString;
    }

    dialog.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

    /*  BeanShell has to see everything it needs before the modal dialog
     *  becomes active; when using a modal dialog, make this the
     *  last line of the method.
     */
    dialog.setVisible(true);
}


// main routine

// default parameters for dialog
NEEDS_WHITESPACE = true;
DEFAULT_COLUMN = 50;
USE_TABS = true;
IGNORE_FIRST_COLUMN = true;

mode = buffer.getMode();
blockComment = mode.getProperty("blockComment");
endComment = mode.getProperty("commentEnd");
tidyBlockComments(DEFAULT_COLUMN, USE_TABS, IGNORE_FIRST_COLUMN);

