<!-- jEdit 3.2 Macro Guide, (C) 2001 John Gellene                -->
<!-- Thu Jun 21 23:49:14 EDT 2001 @200 /Internet Time/           -->
<!--                                                             -->
<!-- jEdit buffer-local properties:                              -->
<!-- :indentSize=1:noTabs=yes:maxLineLen=72:tabSize=2:           -->
<!--                                                             -->
<!-- This file contains the jEdit API Quick Reference            -->


<chapter id="api-macro"><title>General jEdit Classes</title>

<sect1 id="class-jedit"><title>Class jEdit</title>

<para>
    This is the main class of the application. All the methods in this
    class are static methods, so
    they are called with the following syntax, from both macros and
    plugins:
</para>
<programlisting>jEdit.<replaceable>method</replaceable>(<replaceable>parameters</replaceable>)
</programlisting>

<para>
    Here are a few key methods:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static Buffer <function>openFile</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
  <paramdef>String <parameter>path</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Opens the file named <varname>path</varname> in the given
    <classname>View</classname>. To open a file in the current view, use the
    predefined variable <varname>view</varname> for the first parameter.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static Buffer <function>newFile</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This creates a new buffer captioned
    <guimenu>Untitled-&lt;n&gt;</guimenu>in the given
    <classname>View</classname>.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>closeBuffer</function></funcdef>
  <paramdef>View  <parameter>view</parameter></paramdef>
  <paramdef>Buffer  <parameter>buffer</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Closes the buffer named <varname>buffer</varname> in the view named
    <varname>view</varname>. The user will be prompted to save the buffer
    before closing if there are unsaved changes.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>saveAllBuffers</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
  <paramdef>boolean <parameter>confirm</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This saves all open buffers with unsaved changes in the given
    <classname>View</classname>. The parameter <parameter>confirm</parameter>
    determines whether jEdit initially asks for confirmation of the save
    operation.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>closeAllBuffers</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Closes all buffers in the given <classname>View</classname>. A dialog
    window will be displayed for any buffers with unsaved changes to
    obtain user instructions.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>exit</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
  <paramdef>boolean <parameter>reallyExit</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This method causes jEdit to exit. If <parameter>reallyExit</parameter> is
    false and jEdit is running in background mode, the application will simply
    close all  buffers and views and remain in background mode.
</para>
</listitem>


<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getProperty</function></funcdef>
  <paramdef>String <parameter>name</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the value of the property named by <varname>name</varname>, or
    <constant>null</constant> if the property is undefined.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>getBooleanProperty</function></funcdef>
  <paramdef>String <parameter>name</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns a <type>boolean</type> value of <constant>true</constant> or
    <constant>false</constant> for the property named by <varname>name</varname> by
    examining the contents of the property; returns
    <constant>false</constant> if the property cannot be found.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setProperty</function></funcdef>
  <paramdef>String <parameter>name</parameter></paramdef>
  <paramdef>String <parameter>property</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This method sets the property named by <varname>name</varname> with the value
    <varname>property</varname>. An existing property is overwritten.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setBooleanProperty</function></funcdef>
  <paramdef>String <parameter>name</parameter></paramdef>
  <paramdef>boolean <parameter>value</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This method sets the property named by <varname>name</varname> to
    <varname>value</varname>. The boolean value is stored internally as the
    string <quote>true</quote> or <quote>false</quote>.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setTemporaryProperty</function></funcdef>
  <paramdef>String <parameter>name</parameter></paramdef>
  <paramdef>String <parameter>property</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This sets a property that will not be stored during the current
    jEdit session only. This method is useful for storing a value
    obtained by one macro for use by another macro.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getJEditHome</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the path of the directory containing the jEdit executable file.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getSettingsDirectory</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the path of the directory in which user-specific settings
    are stored. This will be null if jEdit was started with the
    <command>-nosettings</command> command-line switch; so do not
    blindly use this method without checking for a null return value
    first.
</para>
</listitem>

</itemizedlist>


<para>The jEdit object also maintains a number of collections which
are useful in some situations. They include the following:</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static EditAction[] <function>getActions</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns an array of <quote>actions</quote> or short routines maintained and used
    by the editor.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static EditAction <function>getAction</function></funcdef>
  <paramdef>String <parameter>action</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the action named <varname>action</varname>, or
    <constant>null</constant> if it does not exist.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static Buffer[] <function>getBuffers</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns an array of open buffers.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static Properties <function>getProperties</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns a Java <classname>Properties</classname> object (a class derived from
    <classname>Hashtable</classname>) holding all properties
    currently used by the program.  The constituent properties fall into three
    categories: application properties, <quote>site</quote> properties, and
    <quote>user</quote> properties.  Site properties take precedence over application
    properties with the same <quote>key</quote> or name, and user properties take
    precedence over both application and site properties.  User settings are
    written to a file named <filename>properties</filename> in the user settings
    directory upon program exit or whenever <function>jEdit.saveSettings()</function>
    is called.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static int <function>getBufferCount</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the number of open buffers.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static Buffer <function>getBuffer</function></funcdef>
  <paramdef>String <parameter>path</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the <classname>Buffer</classname> object containing the file named
    <varname>path</varname>. or <constant>null</constant> if the buffer does not exist.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static Mode[] <function>getModes</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns an array containing all editing modes used by jEdit.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static Mode <function>getMode</function></funcdef>
  <paramdef>String <parameter>name</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the editing mode named by <varname>name</varname>, or
    <constant>null</constant> if such a mode does not exist.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static EditPlugin[] <function>getPlugins</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns an array containing all existing plugins.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>plugin static EditPlugin <function>getPlugin</function></funcdef>
  <paramdef>String <parameter>name</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the plugin named by <varname>name</varname>, or
    <constant>null</constant> if such a plugin does not exist.
</para>
</listitem>

</itemizedlist>
</sect1>

<sect1 id="class-view"><title>Class View</title>

<para>
    This class represents the <quote>parent</quote> or top-level frame window
    in which the editing occurs. It contains the various visible
    components of the program, including the editing pane, menubar,
    toolbar, and any docking windows containing plugins.
</para>

<para>
    Some useful methods from this class include the following:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>splitHorizontally</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Splits the view horizontally.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>splitVertically</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Splits the view vertically.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>unsplit</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Unsplits the view.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public synchronized void <function>showWaitCursor</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Shows a <quote>waiting</quote> cursor (typically, an hourglass).
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public synchronized void <function>hideWaitCursor</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Removes the <quote>waiting</quote> cursor. This method and
    <function>showWaitCursor()</function> are implemented using a reference
    count of requests for wait cursors, so that nested calls work
    correctly; however, you should
    be careful to use these methods in tandem.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public StatusBar <function>getStatus</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Eeach <classname>View</classname> displays a
    <classname>StatusBar</classname> at its bottom edge. It shows the
    current cursor position, the editing mode of the current buffer and
    other information. The method <function>setMessage(String
    message)</function> can be called on the return value of
    <function>getStatus()</function> to display reminders or updates.
    The message remains until the method is called
    again. To display a temporary message in the status bar, call
    <function>setMessageAndClear(String message)</function>, which will
    erase the message automatically after ten seconds.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public DockableWindowManager <function>getDockableWindowManager</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    The object returned by this method keeps track of all dockable
    windows. See <xref linkend="class-dockablewindowmanager" />.
</para>
</listitem>

</itemizedlist>

</sect1>

<!-- open sect1 -->
<sect1 id="class-registers"><title>Class Registers</title>
<para>
  A <classname>Register</classname> is string of text indexed by a
  single character.  Typically the text is taken from selected buffer text
  and the index character is a keyboard character selected by the user.
</para>

<para>
  The application maintains a single <classname>Registers</classname> object
  consisting of an dynamically sized array of <classname>Register</classname>
  objects.  The <classname>Registers</classname> class defines a number of methods
  that give each register the properties of a virtual clipboard.
</para>

<para>
  The following methods provide a clipboard operations for register
  objects:
</para>

<itemizedlist>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public static void <function>copy</function></funcdef>
        <paramdef>JEditTextArea <parameter>textArea</parameter></paramdef>
        <paramdef>char <parameter>register</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      Saves the selected text in the designated <parameter>textArea</parameter>
      to the register indexed at <parameter>register</parameter>.  This
      will replace the existing contents of the designated register.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public static void <function>cut</function></funcdef>
        <paramdef>JEditTextArea <parameter>textArea</parameter></paramdef>
        <paramdef>char <parameter>register</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  <para>
    Saves the selected text in the designated <parameter>textArea</parameter>
    to the register indexed at <parameter>register</parameter>, and removes the
    text from the text area.  This will replace the existing contents of the
    designated register.
  </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public static void <function>append</function></funcdef>
        <paramdef>JEditTextArea <parameter>textArea</parameter></paramdef>
        <paramdef>char <parameter>register</parameter></paramdef>
        <paramdef>String <parameter>separator</parameter></paramdef>
        <paramdef>boolean <parameter>cut</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public static void <function>append</function></funcdef>
        <paramdef>JEditTextArea <parameter>textArea</parameter></paramdef>
        <paramdef>char <parameter>register</parameter></paramdef>
        <paramdef>String <parameter>separator</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public static void <function>append</function></funcdef>
        <paramdef>JEditTextArea <parameter>textArea</parameter></paramdef>
        <paramdef>char <parameter>register</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  <para>
    These three methods append the selected text in the
    <parameter>textArea</parameter> to the designated register. If the
    <parameter>cut</parameter> parameter is not specified, the selected text
    remains in the text area. If the <parameter>separator</parameter>
    parameter is not specified, a newline character is used to separate the
    appended text from any existng register text.
  </para>
  </listitem>

</itemizedlist>

<para>
  The following methods provide a lower-level interface for working with
  registers:
</para>

<itemizedlist>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public static void <function>setRegister</function></funcdef>
        <paramdef>char <parameter>name</parameter></paramdef>
        <paramdef>Register <parameter>register</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public static void <function>setRegister</function></funcdef>
        <paramdef>char <parameter>name</parameter></paramdef>
        <paramdef>Register <parameter>newRegister</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public static void <function>clearRegister</function></funcdef>
        <paramdef>char <parameter>name</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      Sets the text of the designated register to <constant>null</constant>.
      If the register is one of the two registers reserved by the
      application (as discussed in the next section), the text value is
      set to an empty string.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public static Register <function>getRegister</function></funcdef>
        <paramdef>char <parameter>name</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public static Register[] <function>getRegisters</function></funcdef>
        <void/>
      </funcprototype>
    </funcsynopsis>
  </listitem>

</itemizedlist>

</sect1>


<sect1 id="class-register"><title>Interface Registers.Register</title>

<para>
  This interface requires implementation of two methods:
  <function>setValue()</function>, which takes a
  <classname>String</classname> parameter, and
  <function>toString()</function>, which return a textual representation
  of the register's contents. Two classes implement this interface. A
  <classname>ClipboardRegister</classname> is tied to the contents of the
  application's clipboard. The application assigns a
  <classname>ClipboardRegister</classname> to the register indexed under
  the character <filename>$</filename>. A
  <classname>StringRegister</classname> is created for registers assigned
  by the user. In addition, the application assigns to the
  <classname>StringRegister</classname> indexed under <filename>%</filename>
  the last text segment selected in the text area.
</para>

<para>
  A <classname>Register</classname> object does not maintain a copy of
  its index key.  Indexing is performed by the <classname>Registers</classname>
  object.
</para>


</sect1>


<!-- LaTeX spews with id's that are too long? -->
<sect1 id="class-dockablewindowmanager"><title>Class DockableWindowManager</title>

    <para>
        Windows conforming to jEdit's dockable window API can appear in
        <quote>panes</quote> located above, below or to the left or right of the
        main editing pane. They can also be displayed in <quote>floating</quote>
        frame windows. A <classname>DockableWindowManager</classname> keeps
        track of the plugins associated with a particular
        <classname>View</classname>. Each <classname>View</classname> object
        contains an instance of this class.
    </para>

    <itemizedlist>
      <listitem>
        <funcsynopsis>
          <funcprototype>
            <funcdef>public DockableWindow <function>getDockableWindow</function></funcdef>
            <paramdef>String <parameter>name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
        <para>
          This method returns the <classname>DockableWindow</classname>
          object named by the <varname>name</varname> parameter.  The name of a
          <classname>DockableWindow</classname> is a required property of the
          plugin.  If there is no <classname>DockableWindow</classname> bearing the
          requested name, the method returns <constant>null</constant>.
        </para>
       </listitem>

       <listitem>
        <funcsynopsis>
          <funcprototype>
            <funcdef>public void <function>addDockableWindow</function></funcdef>
            <paramdef>String <parameter>name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
        <para>
          If the <classname>DockableWindow</classname> named by the
          <varname>name</varname> parameter does not exist, a message is
          sent to the associated plugin to create it.  The
          <classname>DockableWindow</classname> is then made visible.
        </para>
       </listitem>

       <listitem>
        <funcsynopsis>
          <funcprototype>
            <funcdef>public void <function>showDockableWindow</function></funcdef>
            <paramdef>String <parameter>name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
       </listitem>

       <listitem>
        <funcsynopsis>
          <funcprototype>
            <funcdef>public void <function>removeDockableWindow</function></funcdef>
            <paramdef>String <parameter>name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
       </listitem>

       <listitem>
        <funcsynopsis>
          <funcprototype>
            <funcdef>public void <function>toggleDockableWindow</function></funcdef>
            <paramdef>String <parameter>name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>
       <para>
         These methods, respectively show, hide and toggle the visibility
         of the <classname>DockableWindow</classname> object named by
         the <varname>name</varname> parameter.  If the
         <classname>DockableWindowManager</classname> does not contain a
         reference to the window, these methods send an error message to the
         activity log and have no other effect.  Only
         <function>addDockableWindow()</function> can cause the creation
         of a <classname>DockableWindow</classname>.
         </para>
       </listitem>
    </itemizedlist>

</sect1>

<sect1 id="class-jedittextarea"><title>Class JEditTextArea</title>

<para>
    This class is the visible component that displays the file
    being edited. It is derived from Java's <classname>JComponent</classname> class.
</para>

<para>
    Methods in this class that deal with selecting text
    rely upon classes derived from jEdit's
    <classname>Selection</classname> class. The
    <quote>Selection API</quote> permits selection and concurrent manipulation
    of multiple, non-contiguous regions of text. After describing the
    selection classes, we will outline the selection methods
    of <classname>JEditTextArea</classname>, followed by a listing of
    other methods in this class that are useful in writing macros.
</para>

<sect2 id="class-selection"><title>Class Selection</title>
  <para>
    This is an <glossterm>abstract class</glossterm> which holds data
    on a region of selected text. As an abstract class, it cannot be used
    directly, but instead serves as a parent class for specific types
    of selection structures.  The definition of
    <classname>Selection</classname> contains two child classes used by the
    Selection API:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <classname>Selection.Range</classname> - representing an ordinary
        range of selected text
      </para>
    </listitem>
    <listitem>
      <para>
        <classname>Selection.Rect</classname> - representing a rectangular
        selection region
      </para>
    </listitem>
  </itemizedlist>

  <para>
    A new instance of either type of <classname>Selection</classname>
    can be created by specifying its starting and ending caret positions:
  </para>

  <informalexample><programlisting>    selRange = new Selection.Range(start, end);

    setRect = new Selection.Rect(start, end);</programlisting></informalexample>

  <para>
    Both classes inherit or implement the following methods of the parent
    <classname>Selection</classname> class:
  </para>

  <itemizedlist>

    <listitem>
      <funcsynopsis>
        <funcprototype>
          <funcdef>public int <function>getStart</function></funcdef>
          <void/>
        </funcprototype>
      </funcsynopsis>
    </listitem>

    <listitem>
      <funcsynopsis>
        <funcprototype>
          <funcdef>public int <function>getEnd</function></funcdef>
          <void/>
        </funcprototype>
      </funcsynopsis>
      <para>
        Retrieves the buffer position representing the start or end
        of the selection.
      </para>
    </listitem>

    <listitem>
      <funcsynopsis>
        <funcprototype>
          <funcdef>public int <function>getStartLine</function></funcdef>
          <void/>
        </funcprototype>
      </funcsynopsis>
    </listitem>

    <listitem>
      <funcsynopsis>
        <funcprototype>
          <funcdef>public int <function>getEndLine</function></funcdef>
          <void/>
        </funcprototype>
      </funcsynopsis>
      <para>
        Retrieves the zero-based index number representing the line
        on which the selection starts or ends.
      </para>
    </listitem>

    <listitem>
      <funcsynopsis>
        <funcprototype>
          <funcdef>public int <function>getStart</function></funcdef>
          <paramdef>Buffer <parameter>buffer</parameter></paramdef>
          <paramdef>int <parameter>line</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </listitem>

    <listitem>
      <funcsynopsis>
        <funcprototype>
          <funcdef>public int <function>getEnd</function></funcdef>
          <paramdef>Buffer <parameter>buffer</parameter></paramdef>
          <paramdef>int <parameter>line</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
      <para>
        These two methods return the position of the beginning or end of
        that portion of the selection falling on the line referenced by
        the <parameter>line</parameter> parameter.  The parameter
        <parameter>buffer</parameter> is required because a
        <classname>Selection</classname> object is a lightweight structure
        that does not contain a reference to the
        <classname>Buffer</classname> object to which it relates.
      </para>
      <para>
        These methods do not check whether the <parameter>line</parameter>
        parameter is within the range of lines actually covered by the
        selection. They would typically be used within a
        loop defined by the <function>getStartLine()</function> and
        <function>getEndLine()</function> methods to manipulate
        selection text on a line-by-line basis.  Using them without range
        checking could cause unintended behavior.
      </para>
    </listitem>

  </itemizedlist>

</sect2>

<sect2 id="class-jedittextarea-selection"><title>Selection methods in
JEditTextArea</title>
<para>
  A <classname>JEditTextArea</classname> object maintains an
  <classname>Vector</classname> of current <classname>Selection</classname>
  objects. When a selection is added, the <classname>JEditTextArea</classname>
  attempts to merge the new selection with any existing selection whose range
  contains or overlaps with the new item.  When selections are added or
  removed using by these methods, the editing display is updated to show
  the change in selection status.
</para>

<para>
  Here are the principal methods of <classname>JEditTextArea</classname>
  dealing with <classname>Selection</classname> objects:
</para>

<sect3 id="class-jedittextarea-selection-add-remove">
<title>Adding and removing selections</title>
<itemizedlist>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>setMultipleSelectionEnabled</function></funcdef>
        <paramdef>boolean <parameter>multi</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      Set multiple selection on or off according to the value of
      <parameter>multi</parameter>. This only affects the ability to
      make multiple selections in the user interface; macros and plugins
      can manipulate them regardless of the setting of this flag. In fact,
      in most cases, calling this method should not be necessary.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public Selection[] <function>getSelection</function></funcdef>
        <void/>
      </funcprototype>
    </funcsynopsis>
    <para>
      Returns an array containing a copy of the current selections.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public int <function>getSelectionCount</function></funcdef>
        <void/>
      </funcprototype>
    </funcsynopsis>
    <para>
      Returns the current number of selections.  This can be used to test
      for the existence of selections.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public Selection <function>getSelectionAtOffset</function></funcdef>
        <paramdef>int <parameter>offset</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      Returns the <classname>Selection</classname> containing the specific offset,
      or <constant>null</constant> if there is no selection at that offset.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>addToSelection</function></funcdef>
        <paramdef>Selection <parameter>selection</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>addToSelection</function></funcdef>
        <paramdef>Selection[] <parameter>selection</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      Adds a single <classname>Selection</classname> or an array of
      <classname>Selection</classname> objects to the existing collection
      maintined by the <classname>JEditTextArea</classname>.  Nested or
      overlapping selections will be merged where possible.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>extendSelection</function></funcdef>
        <paramdef>int <parameter>offset</parameter></paramdef>
        <paramdef>int <parameter>end</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      Extends the existing selection containing the position at
      <parameter>offset</parameter> to the position represented by
      <parameter>end</parameter>.  If there is no selection containing
      <parameter>offset</parameter> the method creates a new
      <classname>Selection.Range</classname> extending from
      <parameter>offset</parameter> to <parameter>end</parameter> and
      adds it to the current collection.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>removeFromSelection</function></funcdef>
        <paramdef>Selection <parameter>sel</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>removeFromSelection</function></funcdef>
        <paramdef>int <parameter>offset</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      These methods remove a selection from the current collection.  The
      second version removes any selection that contains the position at
      <parameter>offset</parameter>, and has no effect if no such
      selection exists.
    </para>
  </listitem>
</itemizedlist>
</sect3>

<sect3 id="class-jedittextarea-selection-text">
<title>Getting and setting selected text</title>
<itemizedlist>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public String <function>getSelectedText</function></funcdef>
        <paramdef>Selection  <parameter>s</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public String <function>getSelectedText</function></funcdef>
        <paramdef>String <parameter>separator</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public String <function>getSelectedText</function></funcdef>
        <void/>
      </funcprototype>
    </funcsynopsis>
    <para>
      These three methods return a <classname>String</classname> containing
      text corresponding to the current selections. The first version returns
      the text corresponding to a particular selection named as the parameter,
      allowing for iteration through the collection or focus on a specific
      selection (such as a selection containing the current caret position).
      The second version combines all selection text in a single
      <classname>String</classname>, separated by the
      <classname>String</classname> given as the
      <parameter>separator</parameter>. The final version operates like the
      second version, separating individual selections with newline characters.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>setSelectedText</function></funcdef>
        <paramdef>Selection <parameter>s</parameter></paramdef>
        <paramdef>String <parameter>selectedText</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>setSelectedText</function></funcdef>
        <paramdef>String <parameter>selectedText</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      The first version changes the text of the selection represented
      by <parameter>s</parameter> to
      <parameter>selectedText</parameter>. The second version sets the
      text of all active selections; if there are no selections, the
      text will be inserted at the current caret position.
    </para>
    <para>
      The second version of <function>setSelectedText()</function> is
      the method that will typically be used in macro scripts to insert
      text.
    </para>
  </listitem>
  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public int[] <function>getSelectedLines</function></funcdef>
        <void/>
      </funcprototype>
    </funcsynopsis>
    <para>
      Returns a sorted array of line numbers on which a selection or selections
      are present. The current line is included in the array whether or
      not it is part of a selection.
    </para>
    <para>
      This method is the most convenient way to iterate through selected lines
      in a buffer. The line numbers in the array returned by this method can
      be passed as a parameter to such methods as
      <function>getLineText()</function>, as discussed below.
    </para>
  </listitem>

</itemizedlist>
</sect3>

<sect3 id="class-jedittextarea-selection-other">
<title>Other selection methods</title>

<para>
  The following methods perform selection operations without using
  <classname>Selection</classname> objects as parameters or return
  values. These methods should only be used in macros.
</para>


<itemizedlist>
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectBlock</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Selects the code block surrounding the caret.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectWord</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectLine</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectParagraph</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectFold</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
  Selects the <quote>fold</quote> (a portion of text sharing a given
  indentation level) that contains the line where the editing caret
  is positioned.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectFoldAt</function></funcdef>
  <paramdef>int <parameter>line</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
  <para>
    Selects the fold containing the line referenced by
    <parameter>line</parameter>.
  </para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectAll</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>selectNone</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>indentSelectedLines</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

</itemizedlist>
</sect3>


</sect2>

<sect2 id="class-jedittextarea-non-selection">
  <title>Other methods in JEditTextArea</title>

<sect3 id="class-jedittextarea-caret">
<title>Editing caret methods</title>
<para>
    These methods are used to get, set and move the position of the
    editing caret:
</para>

<itemizedlist>
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public int <function>getCaretPosition</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns a zero-based index of the caret position in the existing buffer.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>setCaretPosition</function></funcdef>
  <paramdef>int <parameter>caret</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Sets the caret position at <parameter>caret</parameter> and deactivates
    any selection of text.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>moveCaretPosition</function></funcdef>
  <paramdef>int <parameter>caret</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This moves the caret to the position represented by
    <parameter>caret</parameter> without affecting any selection of
    text.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public int <function>getCaretLine</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the line on which the caret is positioned.
</para>
</listitem>


</itemizedlist>

<para>
    Each of the following shortcut methods moves the caret.  If the
    <parameter>select</parameter> parameter is set to
    <constant>true</constant>, the intervening text will be selected
    as well.
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToStartOfLine</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToEndOfLine</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToStartOfWhiteSpace</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToEndOfWhiteSpace</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToFirstVisibleLine</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToLastVisibleLine</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToNextCharacter</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToPrevCharacter</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToNextWord</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToPrevWord</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToNextLine</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToPrevLine</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToNextParagraph</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToPrevParagraph</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToNextBracket</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>goToPrevBracket</function></funcdef>
  <paramdef>boolean <parameter>select</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

</itemizedlist>


</sect3>

<!-- open sect3 -->
<sect3 id="class-jedittextarea-scrolling">
<title>Methods for scrolling the text area</title>

<itemizedlist>

<listitem>
  <funcsynopsis>
    <funcprototype>
      <funcdef>public void <function>scrollUpLine</function></funcdef>
      <void/>
    </funcprototype>
  </funcsynopsis>
</listitem>

<listitem>
  <funcsynopsis>
    <funcprototype>
      <funcdef>public void <function>scrollUpPage</function></funcdef>
      <void/>
    </funcprototype>
  </funcsynopsis>
</listitem>

<listitem>
  <funcsynopsis>
    <funcprototype>
      <funcdef>public void <function>scrollDownLine</function></funcdef>
      <void/>
    </funcprototype>
  </funcsynopsis>
</listitem>

<listitem>
  <funcsynopsis>
    <funcprototype>
      <funcdef>public void <function>scrollUpPage</function></funcdef>
      <void/>
    </funcprototype>
  </funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>scrollToCaret</function></funcdef>
  <paramdef>boolean <parameter>doElectricScroll</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Scrolls the text area to ensure that the caret is visible. The
    <parameter>doElectricScroll</parameter> parameter detemines whether
    <quote>electric scrolling</quote> will occur. This leaves a minimum
    number of lines between the caret line and the top and bottom of the
    editing pane.
</para>
</listitem>

<listitem>
  <funcsynopsis>
    <funcprototype>
      <funcdef>public void <function>centerCaret</function></funcdef>
      <void/>
    </funcprototype>
  </funcsynopsis>
  <para>
    Scrolls the text area so that the line containing the edit caret is
    vertically centered.
  </para>
</listitem>

<listitem>
 <funcsynopsis>
  <funcprototype>
    <funcdef>public void <function>setFirstLine</function></funcdef>
     <paramdef>int <parameter>firstLine</parameter></paramdef>
   </funcprototype>
 </funcsynopsis>
</listitem>

<listitem>
  <funcsynopsis>
    <funcprototype>
      <funcdef>public int <function>getFirstLine</function></funcdef>
      <void/>
    </funcprototype>
  </funcsynopsis>
  <para>
    This pair of methods deals with the line number of the first line
    displayed at the top of the text area. Lines that are hidden by folds or
    narrowing are ignored when making this <quote>virtual</quote> line
    count, so the line number will not necessarily conform to the line
    numbers displayed in the text area's gutter. In addition, the virtual
    line index is zero-based, so <function>getFirstLine()</function> will
    always return zero for the first line of text.
  </para>
  <para>
    To convert a virtual line count to a physical count or vice versa,
    see <xref linkend="class-buffer-virtual-lines" />.
  </para>
</listitem>

<listitem>
 <funcsynopsis>
  <funcprototype>
    <funcdef>public void <function>setElectricScroll</function></funcdef>
     <paramdef>int <parameter>electricScroll</parameter></paramdef>
   </funcprototype>
 </funcsynopsis>
</listitem>

<listitem>
  <funcsynopsis>
    <funcprototype>
      <funcdef>public int <function>getElectricScroll</function></funcdef>
      <void/>
    </funcprototype>
  </funcsynopsis>
  <para>
    The <quote>electric scroll</quote> attribute is the number of lines
    above and below the editing caret that always remain visible when
    scrolling.
  </para>
</listitem>
</itemizedlist>

</sect3>

<sect3 id="class-jedittextarea-position">
<title>Methods for calculating editing positions</title>


<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public int <function>getLineOfOffset</function></funcdef>
  <paramdef>int <parameter>offset</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the line on which the given offset is found.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public int <function>getLineStartOffset</function></funcdef>
  <paramdef>int <parameter>line</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public int <function>getLineEndOffset</function></funcdef>
  <paramdef>int <parameter>line</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the offset of the beginning or end of the given line.
</para>
</listitem>

</itemizedlist>
</sect3>

<sect3 id="class-jedittextarea-gettext">
<title>Other methods for retrieving text</title>

<para>
    These methods can retrieve buffer text without regard
    to a selection or the position of the editing caret.
</para>

<itemizedlist>
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public String <function>getText</function></funcdef>
  <paramdef>int <parameter>start</parameter></paramdef>
  <paramdef>int <parameter>len</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the text located between buffer offset positions.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public String <function>getLineText</function></funcdef>
  <paramdef>int <parameter>lineIndex</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the text on the given line.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public String <function>getText</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the entire text in the text area.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>setText</function></funcdef>
  <paramdef>String <parameter>text</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Sets (and replaces) the entire text of the text area.
</para>
</listitem>

</itemizedlist>
</sect3>


<sect3 id="class-jedittextarea-delete">
<title>Methods for deleting text</title>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>delete</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Deletes the character to the left of the editing caret.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>deleteWord</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>deleteLine</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>deleteParagraph</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>deleteToStartOfLine</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>deleteToEndOfLine</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

</itemizedlist>
</sect3>

<!-- open sect3 -->
<sect3 id="class-jedittextarea-modify">
<title>Methods for modifying text</title>

<itemizedlist>

<listitem>
  <funcsynopsis>
    <funcprototype>
      <funcdef>public void <function>toLowerCase</function></funcdef>
      <void/>
    </funcprototype>
  </funcsynopsis>
</listitem>

<listitem>
  <funcsynopsis>
    <funcprototype>
      <funcdef>public void <function>toUpperCase</function></funcdef>
      <void/>
    </funcprototype>
  </funcsynopsis>
  <para>
    These two methods operate on all selected text, including multiple
    selections.
  </para>
</listitem>

<listitem>
  <funcsynopsis>
    <funcprototype>
      <funcdef>public void <function>joinLines</function></funcdef>
      <void/>
    </funcprototype>
  </funcsynopsis>
  <para>
    Joins the current line with the following line.
  </para>
</listitem>

<listitem>
  <funcsynopsis>
    <funcprototype>
      <funcdef>public void <function>setOverwriteEnabled</function></funcdef>
      <paramdef>boolean <parameter>overwrite</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
</listitem>

<listitem>
  <funcsynopsis>
    <funcprototype>
      <funcdef>public boolean <function>isOverwriteEnabled</function></funcdef>
      <void/>
    </funcprototype>
  </funcsynopsis>
  <para>
    Sets and gets whether added text will overwrite text at the editing
    caret or whether it will be inserted immediately to the right of the
    caret.
  </para>
</listitem>

<listitem>
  <funcsynopsis>
    <funcprototype>
      <funcdef>public void <function>userInput</function></funcdef>
      <paramdef>char <parameter>ch</parameter></paramdef>
    </funcprototype>
  </funcsynopsis>
  <para>
     Inserts the character at the caret position as if it were typed at
     the keyboard (keyboard input is actually passed to this method).
     Unlike <function>setSelectedText()</function>, or
     <function>insertString()</function> in the
     <classname>Buffer</classname> class, this method triggers
     any active text formatting features such as auto indent,
     abbreviation expansion and word wrap.
  </para>
</listitem>

</itemizedlist>

</sect3>

<sect3 id="class-jedittextarea-commment">
<title>Methods for creating comments</title>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>lineComment</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    This inserts the line comment string at the beginning of each selected line.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>rangeComment</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    This surrounds each selected text chunk with
    the comment start and end strings.
</para>
</listitem>

</itemizedlist>
</sect3>

<sect3 id="class-jedittextarea-statistics">
<title>Methods for getting buffer statistics</title>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public int <function>getBufferLength</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the number of characters in the buffer.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public int <function>getLineCount</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the number of lines in the buffer being edited.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public int <function>getVirtualLineCount</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the number of <quote>virtual</quote> or visible lines in the
    buffer being edited, which may be less than the total number of
    lines because of folding or narrowing.
</para>
<para>
  To convert a virtual line count to a physical count or vice versa,
  see <xref linkend="class-buffer-virtual-lines" />.
</para>

</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public int <function>getLineLength</function></funcdef>
  <paramdef>int <parameter>line</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the length of the line number <varname>line</varname> (using a
    zero-based count).
</para>
</listitem>

</itemizedlist>
</sect3>
</sect2>

</sect1>

<sect1 id="class-buffer"><title>Class Buffer</title>

<para>
    A <classname>Buffer</classname> represents the contents of an open text
    file as it is maintained in the computer's memory (as opposed to
    how it may be stored on a disk). It is derived from Java's
    <classname>PlainDocument</classname> class.
</para>

<sect2 id="class-buffer-file"><title>File attribute methods</title>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public String <function>getName</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public String <function>getPath</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public File <function>getFile</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
 This method may return <literal>null</literal> if the file is stored on
 a remote file system (for example, if the <application>FTP</application>
 or <application>Archive</application> plugins are in use). This method
 should be avoided if possible.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public boolean <function>isNewFile</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns whether a buffer lacks a corresponding version on disk.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public boolean <function>isDirty</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Returns whether there have been unsaved changes to the buffer.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public boolean <function>isReadOnly</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public boolean <function>isUntitled</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

</itemizedlist>

</sect2>

<sect2 id="class-buffer-editing-attr"><title>Editing attribute methods</title>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public Mode <function>getMode</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>setMode</function></funcdef>
  <paramdef>Mode <parameter>mode</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Gets and sets the editing mode for the buffer.
</para>
</listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public int <function>getIndentSize</function></funcdef>
        <void/>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public int <function>getTabSize</function></funcdef>
        <void/>
      </funcprototype>
    </funcsynopsis>
    <para>
      These methods return the size of an initial indentation at the beginning
      of a line and the distance between tab stops, each measured in
      character columns. If these properties are not individually set for
      a specific buffer, they are inherited from the properties of the buffer's
      associated editing mode.
    </para>
  </listitem>
</itemizedlist>
<para>
  The following two methods are inherited by the <classname>Buffer</classname>
  class.
</para>

<itemizedlist>
  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>putProperty</function></funcdef>
        <paramdef>Object <parameter>key</parameter></paramdef>
        <paramdef>Object <parameter>value</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public Object <function>getProperty</function></funcdef>
        <paramdef>Object <parameter>key</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      The <classname>Buffer</classname> object maintains a table of
      properties that describe a broad range of attributes. The value of each
      property is stored using a key for indexing purposes, usually a
      <classname>String</classname> that names the particular property.
      Property values can be set and retreived using these two methods.
      The <classname>Object</classname> returned by
      <function>getProperty()</function> usually has to be cast to a derived type
      to be useful. Most of these properties are documented in <xref
      linkend="buffer-local" />.
    </para>
  </listitem>
</itemizedlist>

<para>
  These two methods provide shortcuts for getting snd setting <type>boolean</type>
  properties.
</para>

<itemizedlist>
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>getBooleanProperty</function></funcdef>
  <paramdef>String <parameter>name</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns a <type>boolean</type> value of <constant>true</constant> or
    <constant>false</constant> for the property named by <varname>name</varname> by
    examining the contents of the property; returns
    <constant>false</constant> if the property cannot be found.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setBooleanProperty</function></funcdef>
  <paramdef>String <parameter>name</parameter></paramdef>
  <paramdef>boolean <parameter>value</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This method sets the property named by <varname>name</varname> to
    <varname>value</varname>. The boolean value is stored internally as the
    string <quote>true</quote> or <quote>false</quote>.
</para>
</listitem>

</itemizedlist>


</sect2>

<sect2 id="class-buffer-editing-action"><title>Editing action methods</title>
<sect3 id="class-buffer-editing-general"><title>General editing methods</title>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>reload</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
  Reloads the buffer from disk into <parameter>view</parameter>, asking
  for confirmation if the buffer has unsaved changes.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public boolean <function>save</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
  <paramdef>String <parameter>path</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public boolean <function>save</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
  <paramdef>String <parameter>path</parameter></paramdef>
  <paramdef>boolean <parameter>rename</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    The <parameter>rename</parameter> parameter causes a buffer's name to
    change if set to <parameter>true</parameter>; if
    <parameter>false</parameter>, a copy is saved to
    <parameter>path</parameter>.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public boolean <function>saveAs</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
  <paramdef>boolean <parameter>rename</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Prompts the user for a new name for saving the file.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>beginCompoundEdit</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>endCompoundEdit</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Marks the beginning and end of a series of editing operations that will
    be dealt with by a single <guimenuitem>Undo</guimenuitem> command.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public void <function>removeTrailingWhiteSpace</function></funcdef>
  <paramdef>int[] <parameter>lines</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Removes trailing whitespace in the lines referenced by the index numbers
    in <parameter>lines</parameter> array.
</para>
</listitem>

</itemizedlist>

  <para>
    The following methods are inherited by <classname>Buffer</classname>
    from its parent class.
  </para>

  <itemizedlist>

    <listitem>
      <funcsynopsis>
        <funcprototype>
          <funcdef>public String <function>getText</function></funcdef><!--
          --><paramdef>int <parameter>offset</parameter></paramdef>
          <paramdef>int <parameter>length</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </listitem>

    <listitem>
      <funcsynopsis>
        <funcprototype>
          <funcdef>public void <function>getText</function></funcdef><!--
          --><paramdef>int <parameter>offset</parameter></paramdef>
          <paramdef>int <parameter>length</parameter></paramdef>
          <paramdef>Segment <parameter>text</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
     <para>
       These methods extract a portion of buffer text having length
       <varname>length</varname> beginning at offset position
       <varname>offset</varname>.  The first method returns a newly
       created <classname>String</classname> containing the requested
       excerpt.  The second version initializes an existing
       <classname>Segment</classname> object with the location of the
       requested excerpt.  The <classname>Segment</classname> object
       represents array locations within the <classname>Buffer</classname>
       object's data and should be used on a read-only basis. Calling
       <function>toString()</function> on the <classname>Segment</classname>
       will create a new object suitable for manipulation.
     </para>
    </listitem>

    <listitem>
      <funcsynopsis>
        <funcprototype>
          <funcdef>public void <function>insertString</function></funcdef><!--
          --><paramdef>int <parameter>offset</parameter></paramdef>
          <paramdef>String <parameter>text</parameter></paramdef>
          <paramdef>AttributeSet <parameter>attr</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
     <para>
       This method inserts the string <varname>text</varname> at offset
       <varname>offset</varname> in the buffer. The attribute
       <varname>attr</varname> is not used by jEdit and should be left
       as <constant>null</constant>.
     </para>
    </listitem>

    <listitem>
      <funcsynopsis>
        <funcprototype>
          <funcdef>public int <function>getLength</function></funcdef><void/>
        </funcprototype>
      </funcsynopsis>
     <para>
       This method returns the number of characters in the buffer.
     </para>
    </listitem>

    </itemizedlist>
</sect3>

<sect3 id="class-buffer-editing-marker"><title>Marker methods</title>
<para>
  Buffers may have one or more <glossterm>markers</glossterm> which serve
  as textual bookmarks.  A <classname>Marker</classname> has three key attributes: the
  <classname>Buffer</classname> to which it relates, the line number to which
  the marker refers, and an optional shortcut character.  The shortcut
  identifies the the key that can be pressed with the
  <guimenu>Markers</guimenu>&gt;<guimenuitem>Go To Marker</guimenuitem>
  command to move the editing caret to the marker line location.
</para>
<para>
  The position and shortcut character of a <classname>Marker</classname>
  object can be retrieved with the methods <function>getPosition()</function>
  and <function>getShortcut()</function>.
</para>
<para>
  The <classname>Buffer</classname> class includes the following methods to
  set and retrieve markers:
</para>

<itemizedlist>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>addMarker</function></funcdef>
        <paramdef>char <parameter>shortcut</parameter></paramdef>
        <paramdef>int <parameter>pos</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      Adds a marker for the line indicated by <parameter>pos</parameter>
      using <parameter>shortcut</parameter>.  Set
      <parameter>shortcut</parameter> to <constant>'\0'</constant> to
      indicate the absence of a shortcut.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public Vector <function>getMarkers</function></funcdef>
        <void/>
      </funcprototype>
    </funcsynopsis>
    <para>
      Returns a <classname>Vector</classname> containing the buffer's
      current markers.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public Marker <function>getMarkerAtLine</function></funcdef>
        <paramdef>int <parameter>line</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      Returns the first marker at the specified line, or
      <constant>null</constant> if no marker is present at the line.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public Marker <function>getMarker</function></funcdef>
        <paramdef>char <parameter>shortcut</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      Returns the marker with the specified shortcut, or
      <constant>null</constant> if no such marker exists.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>removeMarker</function></funcdef>
        <paramdef>int <parameter>line</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      Removes all markers at the specified line.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>removeAllMarkers</function></funcdef>
        <void/>
      </funcprototype>
    </funcsynopsis>
    <para>
      Removes all markers in the buffer.
    </para>
  </listitem>

</itemizedlist>
</sect3>

<sect3 id="class-buffer-editing-folding"><title>Folding methods</title>

<para>
  The <quote>folding</quote> features of jEdit allow sections of source
  code with a given indentation level to be hidden, creating
  <quote>folds</quote> that can be hidden and expanded, as well as a
  virtual line numbering scheme that skips hidden, folded lines.  The
  following methods in the <classname>Buffer</classname> class deal with
  the folding mechanism.
</para>

<itemizedlist>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public boolean <function>collapseFoldAt</function></funcdef>
        <paramdef>int <parameter>line</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      Collapses the fold that contains the specified line number.  The
      method returns <constant>false</constant> if there are no folds in
      the buffer for the indicated line.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public boolean <function>expandFoldAt</function></funcdef>
        <paramdef>int <parameter>line</parameter></paramdef>
        <paramdef>boolean <parameter>fully</parameter></paramdef>
        <paramdef>JEditTextArea <parameter>textArea</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      Expands the fold that contains the specified line number.  If
      <parameter>fully</parameter> is true, all folds at the line will be
      expanded, otherwise only one level of folding will be expanded. The
      <parameter>textArea</parameter> parameter is provided to the method
      to facilitiate scrolling after folds are expanded.
    </para>
    <para>
      The method returns <constant>false</constant> if there are no folds in
      the buffer for the indicated line.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>expandFolds</function></funcdef>
        <paramdef>int <parameter>level</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      This method expands all folds in the buffer up to
      <parameter>level</parameter> and collapses all folds with a
      higher level.  The <parameter>level</parameter> parameter
      represents the number of indentations, not the actual number
      of indented spaces.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>expandAllFolds</function></funcdef>
        <void/>
      </funcprototype>
    </funcsynopsis>
    <para>
      Expands all folds in the buffer.
    </para>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public void <function>narrow</function></funcdef>
        <paramdef>int <parameter>start</parameter></paramdef>
        <paramdef>int <parameter>end</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
    <para>
      Narrows the visible portion of the buffer to the specified
      line range. To undo the narrowing, call the
      <function>Buffer.expandAllFolds()</function> method.
    </para>
  </listitem>

</itemizedlist>

</sect3>

<sect3 id="class-buffer-virtual-lines">
<title>Virtual and physical line indices</title>

<para>
  When jEdit's folding or narrowing features are used to hide
  portions of a buffer, the <quote>virtual</quote> line count visible
  in the text area is generally not equal to the <quote>physical</quote>
  line count of the buffer represented by the gutter's display.  The
  following pair of methods translate one enumeration to the other.
</para>


<itemizedlist>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public int <function>virtualToPhysical</function></funcdef>
        <paramdef>int <parameter>lineNo</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>

  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public int <function>physicalToVirtual</function></funcdef>
        <paramdef>int <parameter>lineNo</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>

</itemizedlist>

</sect3>

</sect2>

</sect1>

<sect1 id="class-macros"><title>Class Macros</title>

<para>
    The following shortcut methods are useful in displaying output messages
    or obtaining input from a macro.
</para>

  <itemizedlist>

<listitem>
 <funcsynopsis>
  <funcprototype>
   <funcdef>public static void <function>message</function></funcdef>
	<paramdef>View <parameter>view</parameter></paramdef>
    <paramdef>String <parameter>message</parameter></paramdef>
  </funcprototype>
 </funcsynopsis>
<para>
    Displays the text of <parameter>message</parameter> (with an information icon)
    in a modal message box centered on the designated <parameter>view</parameter>.
</para>
</listitem>

<listitem>
 <funcsynopsis>
  <funcprototype>
   <funcdef>public static void <function>error</function></funcdef>
	<paramdef>View <parameter>view</parameter></paramdef>
    <paramdef>String <parameter>message</parameter></paramdef>
  </funcprototype>
 </funcsynopsis>
<para>
    Similar to <function>message</function> but displays an error icon.
</para>
</listitem>

<listitem>
 <funcsynopsis>
  <funcprototype>
   <funcdef>public static String <function>input</function></funcdef>
   <paramdef>View <parameter>view</parameter></paramdef>
   <paramdef>String <parameter>prompt</parameter></paramdef>
  </funcprototype>
 </funcsynopsis>
</listitem>

<listitem>
 <funcsynopsis>
  <funcprototype>
   <funcdef>public static String <function>input</function></funcdef>
   <paramdef>View <parameter>view</parameter></paramdef>
   <paramdef>String <parameter>prompt</parameter></paramdef>
   <paramdef>String <parameter>defaultValue</parameter></paramdef>
  </funcprototype>
 </funcsynopsis>
<para>
    Displays the text of <parameter>prompt</parameter>, a text input field,
    and a question icon in the designated <parameter>view</parameter>. In
    the second version, the text field will initially contain the text of
    <parameter>defaultValue</parameter>. Returns the contents of the text
    field if the dialog box is dismissed by pressing the
    <guilabel>OK</guilabel> button, or <constant>null</constant> if the
    <guilabel>Cancel</guilabel> button is pressed.
</para>
</listitem>

</itemizedlist>


</sect1>

<sect1 id="class-searchandreplace"><title>Class SearchAndReplace</title>

<para>
    Search and replace routines are undertaken by jEdit's
    <classname>SearchAndReplace</classname> class.
</para>

<para>
    The following static methods allow you to set or get the parameters
    for a search.  You can do this prior to or even without
    activating the search dialog.
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setSearchString</function></funcdef>
  <paramdef>String <parameter>search</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>


<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getSearchString</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setReplaceString</function></funcdef>
  <paramdef>String <parameter>replace</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getReplaceString</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setIgnoreCase</function></funcdef>
  <paramdef>boolean <parameter>ignoreCase</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>


<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>getIgnoreCase</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>


<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setRegexp</function></funcdef>
  <paramdef>boolean <parameter>regexp</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>getRegexp</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Determines whether the search term is interpreted as a regular expression.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setReverseSearch</function></funcdef>
  <paramdef>boolean <parameter>reverse</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>getReverseSearch</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Determines whether a reverse search will conducted from the current
    position to the beginning of a buffer.  Currently, only literal
    reverse searches are supported.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setBeanShellReplace</function></funcdef>
  <paramdef>boolean <parameter>beanshell</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>getBeanShellReplace</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Determines whether the replace string will be interpreted as a
    BeanShell expression.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setAutoWrapAround</function></funcdef>
  <paramdef>boolean <parameter>wrap</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>getAutoWrapAround</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
<para>
    Determines whether a search will automatically <quote>wrap</quote>
    to the beginning of a buffer after the search reaches the buffer's end.
    If this flag is set to <constant>false</constant>, a dialog will
    request confirmation of a wrap-around search.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>setSearchFileSet</function></funcdef>
  <paramdef>SearchFileSet <parameter>fileset</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    A <classname>SearchFileSet</classname> is an abstract class representing the
    set of files that are the subject of a search. There are four classes derived
    from <classname>SearchFileSet</classname>:
</para>

<bridgehead renderas="sect2">DirectoryListSet</bridgehead>

<para>
    This represents a set of files taken from a directory.  It can be extended recursively
    to include files in subdirectories.  The constructor for this class has the
    following syntax:
</para>

<itemizedlist>
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public <function>DirectoryListSet</function></funcdef>
  <paramdef>String <parameter>directory</parameter></paramdef>
  <paramdef>String <parameter>glob</parameter></paramdef>
  <paramdef>boolean <parameter>recurse</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    The parameter <parameter>glob</parameter> is the glob pattern
    that determines which files from the
    directory will be selected (see <xref linkend="globs"/> for
    information about glob patterns),
    and <parameter>recurse</parameter> determines whether the
    selection will recurse into subdirectories.
</para>
</listitem>
</itemizedlist>

<bridgehead renderas="sect2">class AllBufferSet</bridgehead>

<para>
    This class represents the set of all buffers currently open.  The constructor
    for this class takes a file mask as a single parameter:
</para>

<itemizedlist>
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public <function>AllBufferSet</function></funcdef>
  <paramdef>String <parameter>glob</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>
</itemizedlist>

<bridgehead renderas="sect2">class CurrentBufferSet</bridgehead>

<para>
    This class represents a buffer set consisting of the current buffer only.
    The constructor has no parameters.
</para>

<itemizedlist mark="disc">
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public <function>CurrentBufferSet</function></funcdef>
  <void/>
 </funcprototype>
</funcsynopsis>
</listitem>
</itemizedlist>

<para>
<emphasis>class BufferListSet</emphasis>
</para>

<para>
    This class represents a buffer set containing an arbitrary set
    of files specified by the user.  The constructor takes a
    single <classname>Vector</classname> parameter containing the
    path names of the files to be searched.
</para>

<itemizedlist mark="disc">
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public <function>BufferListSet</function></funcdef>
  <paramdef>Vector <parameter>files</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>
</itemizedlist>

</listitem>

</itemizedlist>

<para>
    The actual tasks of searching and replacing, based on these parameters,
    are performed by the following methods. The return value of each indicates
    whether the operation succeeded.
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>find</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This will select the next instance of matching text if the search
    is successful.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>replace</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This will replace the each occurrence of the <quote>search string</quote>
    in selected text with the <quote>replace string</quote>.  If no text is selected,
    the method has no effect.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>replace</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
  <paramdef>Buffer <parameter>buffer</parameter></paramdef>
  <paramdef>int <parameter>start</parameter></paramdef>
  <paramdef>int <parameter>end</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This will replace the each occurrence of the <quote>search string</quote>
    in the specified range with the <quote>replace string</quote>.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>replaceAll</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This method performs a replacement in all buffers in the
    <classname>SearchFileSet</classname>. Text selection is ignored.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static boolean <function>hyperSearch</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This collects all instances of matching text in the members of the
    <classname>SearchFileSet</classname> and displays them in a dedicated window.
    Text selection is ignored.
</para>
</listitem>


</itemizedlist>

<para>
    The <quote>HyperSearch</quote> and <quote>Keep dialog</quote> features, as reflected in
    checkbox options in the search dialog, are not handled from within
    <classname>SearchAndReplace</classname>. If you wish to have these options set
    before the search dialog appears, make a prior call to either or both of the
    following:
</para>

<programlisting>jEdit.setBooleanProperty(<quote>search.hypersearch.toggle</quote>,true);
jEdit.setBooleanProperty(<quote>search.keepDialog.toggle</quote>,true);</programlisting>

<para>
    If you are not using the dialog to undertake a search or replace, you may call
    any of the search and replace methods (including <function>hyperSearch()</function>)
    without concern for the value of these properties.
</para>

<para>
  To create and display the search and replace
  dialog, first assign desired values to the search settings using the methods
  described above.  Then create a new <classname>SearchDialog</classname> object
  using the following constructor:
</para>

<itemizedlist>
  <listitem>
    <funcsynopsis>
      <funcprototype>
        <funcdef>public <function>SearchDialog</function></funcdef>
        <paramdef>View <parameter>view</parameter></paramdef>
        <paramdef>String <parameter>searchString</parameter></paramdef>
        <paramdef>int <parameter>searchIn</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </listitem>
</itemizedlist>

<para>
  The parameter <parameter>searchIn</parameter> can take the defined
  constant values <constant>CURRENT_BUFFER</constant>,
  <constant>ALL_BUFFERS</constant> or <constant>DIRECTORY</constant>,
  defined in the <classname>SearchDialog</classname> class.
  This parameter determines which file set radio button to preselect
  in the dialog box.
</para>

</sect1>


<sect1 id="class-guiutilities"><title>Class GUIUtilities</title>

<para>
    The methods dealing with creating menus and menu items are described
    in <xref linkend="plugin-implement-menu" />.
    One other <type>static</type> method in this class encapsulates the
    creation and display of jEdit's custom file chooser dialog box.
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String[] <function>showVFSFileDialog</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
  <paramdef>String <parameter>path</parameter></paramdef>
  <paramdef>int <parameter>type</parameter></paramdef>
  <paramdef>boolean <parameter>multipleSelection</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    This method displays the <!-- enhanced, more versatile -->
    <classname>VFSFileChooserDialog</classname> provided by jEdit.  <!-- In this case, -->
    If <parameter>path</parameter> is set to <constant>null</constant>, the dialog
    will display the directory of the current buffer. The
    <parameter>type</parameter> parameter can either be
    <constant>JFileChooser.OPEN_DIALOG</constant>
    or <constant>JFileChooser.SAVE_DIALOG</constant> (you might need to
    import the <classname>JFileChooser</classname> class from the
    <literal>javax.swing</literal> package). The final parameter
    determines whether multiple selection of files is permitted.
</para>
</listitem>

</itemizedlist>

</sect1>

<sect1 id="class-textutilities"><title>Class TextUtilities</title>

<para>
    This class contains a number of <type>static</type> methods
    that can be helpful in handling buffer text.
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static int <function>findMatchingBracket</function></funcdef>
  <paramdef>Buffer <parameter>buffer</parameter></paramdef>
  <paramdef>int <parameter>line</parameter></paramdef>
  <paramdef>int <parameter>offset</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the offset of the bracket matching the one at offset
    <parameter>offset</parameter> of line <parameter>line</parameter> of the buffer;
    returns -1 if the bracket is unmatched or if the specified
    character is not a bracket.  The method throws a
    <classname>BadLocationException</classname> if the <parameter>line</parameter>
    or <parameter>offset</parameter> parameters are out of range.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static int <function>findWordStart</function></funcdef>
  <paramdef>String <parameter>line</parameter></paramdef>
  <paramdef>int <parameter>pos</parameter></paramdef>
  <paramdef>String <parameter>noWordSep</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static int <function>findWordEnd</function></funcdef>
  <paramdef>String <parameter>line</parameter></paramdef>
  <paramdef>int <parameter>pos</parameter></paramdef>
  <paramdef>String <parameter>noWordSep</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the position on which the word found on line
    <parameter>line</parameter>, position <parameter>line</parameter> begins or ends.
    The parameter <parameter>noWordSep</parameter> contains those non-alphanumeric
    characters that will be treated as part of a word for purposes of
    finding the beginning or end of word (such as an underscore
    character).
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>format</function></funcdef>
  <paramdef>String <parameter>text</parameter></paramdef>
  <paramdef>int <parameter>maxLineLength</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Reformats a string and inserts line separators as necessary so
    that no line exceeds <parameter>maxLineLength</parameter> in length.
</para>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>spacesToTabs</function></funcdef>
  <paramdef>String <parameter>in</parameter></paramdef>
  <paramdef>int <parameter>tabSize</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>tabsToSpaces</function></funcdef>
  <paramdef>String <parameter>in</parameter></paramdef>
  <paramdef>int <parameter>tabSize</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Makes the indicated change based upon a tab size of
    <parameter>tabSize</parameter>.
</para>
</listitem>

</itemizedlist>

</sect1>

<sect1 id="class-miscutilities"><title>Class MiscUtilities</title>

<para>
This class is another collection of <type>static</type> utility methods.
</para>

<para>
    These methods extract various elements from a path name:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getFileName</function></funcdef>
  <paramdef>String <parameter>path</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getFileExtension</function></funcdef>
  <paramdef>String <parameter>name</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>getParentOfFile</function></funcdef>
  <paramdef>String <parameter>path</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    Returns the directory containing the specified local file.
    <!-- XXX: for local files only -->
</para>
</listitem>

</itemizedlist>

<para>
    The following method creates a string of whitespace characters that uses as
    many tabs as possible:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static String <function>createWhiteSpace</function></funcdef>
  <paramdef>int <parameter>len</parameter></paramdef>
  <paramdef>int <parameter>tabSize</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
<para>
    If <parameter>tabSize</parameter> is set to zero, the string will consist entirely
    of space characters.  To get a whitespace string tuned to the current buffer's
    settings, call this method as follows:</para>
<informalexample>
<programlisting>myWhitespace = MiscUtilities.createWhiteSpace(myLength,
    buffer.getTabSize());</programlisting></informalexample>

</listitem>
</itemizedlist>

<para>
    Here are two sorting methods, one for simple arrays and one for
    Java <classname>Vector</classname> objects:
</para>

<itemizedlist>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>quicksort</function></funcdef>
  <paramdef>Object[] <parameter>obj</parameter></paramdef>
  <paramdef>Compare <parameter>compare</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public static void <function>quicksort</function></funcdef>
  <paramdef>Vector <parameter>vector</parameter></paramdef>
  <paramdef>Compare <parameter>compare</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>

</itemizedlist>

<para>
    The type of the second parameter in both methods is a Java
    <glossterm>interface</glossterm> defined inside the
    <classname>MiscUtilities</classname> class. Any Java class implementing
    an interface must implement each of the methods set forth
    in the interface's abstract specification.  The <classname>Compare</classname>
    interface consists of a single method:
</para>

<itemizedlist>
<listitem>
<funcsynopsis>
 <funcprototype>
  <funcdef>public int <function>compare</function></funcdef>
  <paramdef>Object <parameter>obj1</parameter></paramdef>
  <paramdef>Object <parameter>obj2</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>
</itemizedlist>

<para>
    To work correctly with the <function>quicksort</function> algorithm, this method
    should return a negative value if <parameter>obj1</parameter> is ordered prior to
    <parameter>obj2</parameter>, a positive value if <parameter>obj2</parameter>
    is prior, and zero if the two objects are equivalent for ordering purposes.
</para>

<para>
    When writing macros, keep in mind that
    under Java versions earlier than 1.3, BeanShell cannot implement
    arbitrary interfaces
    such as <classname>Compare</classname> (although, as we have noted
    in <xref linkend="macro-tips-BeanShell-interface" />,
    a BeanShell method can
    implement a number of specific listener interfaces).  Fortunately,
    jEdit provides a number of classes implementing <classname>Compare</classname>
    for sorting purposes. Among them are <classname>StringCompare</classname> and
    <classname>StringICaseCompare</classname>. Both classes compare
    <classname>String</classname>
    object; the latter class compares two strings on a case-insentive basis.
</para>

<para>
    Calling <function>quicksort</function> on a <classname>Vector</classname> of
    <classname>String</classname> objects could therefore take the following form:
</para>
<informalexample><programlisting>MiscUtilities.quicksort(myVectorOfStrings,
    new StringICaseCompare());</programlisting></informalexample>
<para>
    There is no return value, but the <classname>Vector</classname> provided
    as the first parameter will be now be sorted on a case-insensitive basis.
</para>

</sect1>


<sect1 id="class-beanshell"><title>Class BeanShell</title>

<para>
    This class integrates the BeanShell interpreter into jEdit.  One method is
    worth mentioning here because it can be used in a macro to chain together
    execution of several macros:
</para>

<itemizedlist>
<listitem>
<funcsynopsis>
<funcprototype>
  <funcdef>public static void <function>runScript</function></funcdef>
  <paramdef>View <parameter>view</parameter></paramdef>
  <paramdef>String <parameter>path</parameter></paramdef>
  <paramdef>boolean <parameter>ownNamespace</parameter></paramdef>
  <paramdef>boolean <parameter>rethrowBshErrors</parameter></paramdef>
 </funcprototype>
</funcsynopsis>
</listitem>
</itemizedlist>

<para>
    This method runs the script file identified by <parameter>path</parameter>.  Within
    that script, references to <parameter>buffer</parameter>, <parameter>textArea</parameter>
    and <parameter>editPane</parameter> are
    determined with reference to the <parameter>view</parameter> parameter.  If
    <parameter>rethrowBshErrors</parameter> is set to true, any runtime exception thrown
    by the child script will be rethrown to the parent script for
    additional handling.
</para>

<para>
    The parameter <parameter>ownNamespace</parameter>
    determines whether a separate namespace will be established for the
    BeanShell interpreter. If set to <constant>false</constant>, methods and
    variables defined in the script will be available to all future
    uses of BeanShell; if set to <constant>true</constant>, they will be lost as
    soon as the script finishes executing. jEdit uses a value of
    <constant>false</constant> when running startup scripts, and a value of
    <constant>true</constant> when running all other macros.
</para>

</sect1>

</chapter>


